# This project uses the GitFlow Workflow as defined here:
#   https://www.atlassian.com/git/tutorials/comparing-workflows#GitFlow-workflow
image:
  name: 745222113226.dkr.ecr.us-east-1.amazonaws.com/interop/node-base:latest
  aws:
    access-key: $AWS_ACCESS_KEY_ID
    secret-key: $AWS_SECRET_ACCESS_KEY

pipelines:
  default:
    - step:
        script:
          - echo "Deployment is triggered by ${BITBUCKET_BRANCH}"
          - exit 1;
  branches:
    develop:
      - step:
          name: build docker and upload to docker hub
          caches:
            - node
          script:
            - export TARGET_ENV=test
            - export CREDENTIALS=${ENC_PW_TEST}
            - cd ci
            - . ci-0-set-properties.sh
            - . ci-1-prepare-sources.sh
            - . ci-2-build-project.sh
            - . ci-3-docker-image.sh
          artifacts:
            - aws/task-definition_test.json
      - step:
          name: update the aws task definition
          caches:
            - node
          script:
            - export TARGET_ENV=test
            - cd ci
            - . ci-0-set-properties.sh
            - . ci-4-aws-task-update.sh
      - step:
          name: update the aws service
          deployment: test
          caches:
            - node
          script:
            - export TARGET_ENV=test
            - cd ci
            - . ci-0-set-properties.sh
            - . ci-5-aws-service-update.sh
    master:
      - step:
          name: build docker and upload to docker hub
          caches:
            - node
          script:
            - export TARGET_ENV=prod
            - export CREDENTIALS=${ENC_PW_PROD}
            - cd ci
            - . ci-0-set-properties.sh
            - . ci-1-prepare-sources.sh
            - . ci-2-build-project.sh            
            - . ci-3-docker-image.sh
          artifacts:
            - aws/task-definition_prod.json
      - step:
          name: update the aws task definition
          caches:
            - node
          script:
            - export TARGET_ENV=prod
            - cd ci
            - . ci-0-set-properties.sh
            - . ci-4-aws-task-update.sh
      - step:
          name: update the aws service
          deployment: production
          trigger: manual
          caches:
            - node
          script:
            - export TARGET_ENV=prod
            - cd ci
            - . ci-0-set-properties.sh
            - . ci-5-aws-service-update.sh
    feature/*:
      - step:
          name: build the source code
          script:
            - echo "success"
    qa/*:
      - step:
          name: build docker and test the project
          caches:
            - node
          script:
            - export TARGET_ENV=test
            - export CREDENTIALS=${ENC_PW_TEST}
            - cd ci
            - . ci-0-set-properties.sh
            - . ci-1-prepare-sources.sh
            - . ci-1-2-prepare-test.sh
            - . ci-1-3-test-project.sh
    release/*:
      - step:
          name: build the source code
          script:
            - echo "success"
    hotfix/*:
      - step:
          name: build the source code
          script:
            - echo "success"
    discovery/*:
      - step:
          name: build nodejs project
          caches:
            - node
          script:
            - export TARGET_ENV=prod
            - cd ci
            - . ci-0-set-properties.sh
            - . ci-1-prepare-sources.sh
            - . ci-2-build-project.sh
          artifacts:
            - projects/**
      - step:
          name: build image and push to ECR
          caches:
            - node
          script:
            - cd ci
            - . assume_role.sh
            - . ci-3-docker-build-push.sh
      - step:
          name: deploy to EKS
          script:
            - cd ci
            - source assume_role.sh
            - aws eks --region us-east-2 update-kubeconfig --name dev-cN1fWKZK
            - kubectl apply -f ../deployment.yaml
      # - step:
      #     name: update the aws service
      #     deployment: test
      #     caches:
      #       - node
      #     script:
      #       - export TARGET_ENV=test
      #       - cd ci
      #       - . ci-0-set-properties.sh
      #       - . ci-5-aws-service-update.s

options:
  docker: true
